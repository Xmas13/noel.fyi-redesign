---
- hosts: docker-servers
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install aptitude using apt
      apt: 
        name: aptitude 
        state: latest 
        update_cache: yes 
        force_apt_get: yes

    - name: Install required system packages
      apt: 
        name: "{{ item }}"
        state: latest 
        update_cache: yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'gnupg-agent', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'python-yaml']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt: 
        update_cache: yes 
        name: docker-ce 
        state: latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    # - name: Pull default Docker image
    #   docker_image:
    #     name: "{{ default_container_image }}"
    #     source: pull

    # Creates the number of containers defined by the variable create_containers, using values from vars file
    # - name: Create default containers
    #   docker_container:
    #     name: "{{ default_container_name }}{{ item }}"
    #     image: "{{ default_container_image }}"
    #     state: present
    #   with_sequence: count={{ create_containers }}

    - name: Test Docker with hello world example
      shell: "docker run hello-world"
      register: hello_world_output

    - name: Show output of hello world example
      debug:
        msg: "{{hello_world_output.stdout}}"

    - name: Install docker-compose
      get_url: 
        url : https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'
    
    - name: Test docker-compose
      shell: "docker-compose --version"
      register: "docker_compose_output"

    - name: Show output of docker-compose --version
      debug:
        msg: "{{docker_compose_output.stdout}}"